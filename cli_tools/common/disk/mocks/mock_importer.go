// Code generated by MockGen. DO NOT EDIT.
// Source: importer.go

// Package mock_disk is a generated GoMock package.
package mock_disk

import (
	disk "github.com/GoogleCloudPlatform/compute-image-tools/cli_tools/common/disk"
	gomock "github.com/golang/mock/gomock"
	compute "google.golang.org/api/compute/v1"
	reflect "reflect"
)

// MockImporter is a mock of Importer interface
type MockImporter struct {
	ctrl     *gomock.Controller
	recorder *MockImporterMockRecorder
}

// MockImporterMockRecorder is the mock recorder for MockImporter
type MockImporterMockRecorder struct {
	mock *MockImporter
}

// NewMockImporter creates a new mock instance
func NewMockImporter(ctrl *gomock.Controller) *MockImporter {
	mock := &MockImporter{ctrl: ctrl}
	mock.recorder = &MockImporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImporter) EXPECT() *MockImporterMockRecorder {
	return m.recorder
}

// Import mocks base method
func (m *MockImporter) Import(source disk.FileOrImageReference, destinationPrototype *compute.Disk) (disk.DiskURI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Import", source, destinationPrototype)
	ret0, _ := ret[0].(disk.DiskURI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Import indicates an expected call of Import
func (mr *MockImporterMockRecorder) Import(source, destinationPrototype interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Import", reflect.TypeOf((*MockImporter)(nil).Import), source, destinationPrototype)
}

// Cancel mocks base method
func (m *MockImporter) Cancel(reason string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", reason)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Cancel indicates an expected call of Cancel
func (mr *MockImporterMockRecorder) Cancel(reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockImporter)(nil).Cancel), reason)
}

// MockImporterProvider is a mock of ImporterProvider interface
type MockImporterProvider struct {
	ctrl     *gomock.Controller
	recorder *MockImporterProviderMockRecorder
}

// MockImporterProviderMockRecorder is the mock recorder for MockImporterProvider
type MockImporterProviderMockRecorder struct {
	mock *MockImporterProvider
}

// NewMockImporterProvider creates a new mock instance
func NewMockImporterProvider(ctrl *gomock.Controller) *MockImporterProvider {
	mock := &MockImporterProvider{ctrl: ctrl}
	mock.recorder = &MockImporterProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImporterProvider) EXPECT() *MockImporterProviderMockRecorder {
	return m.recorder
}

// NewDataDiskImporter mocks base method
func (m *MockImporterProvider) NewDataDiskImporter(environment disk.Environment) disk.Importer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDataDiskImporter", environment)
	ret0, _ := ret[0].(disk.Importer)
	return ret0
}

// NewDataDiskImporter indicates an expected call of NewDataDiskImporter
func (mr *MockImporterProviderMockRecorder) NewDataDiskImporter(environment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDataDiskImporter", reflect.TypeOf((*MockImporterProvider)(nil).NewDataDiskImporter), environment)
}

// NewTranslatingDiskImporter mocks base method
func (m *MockImporterProvider) NewTranslatingDiskImporter(environment disk.Environment, overrides disk.TranslationOverrides) disk.Importer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTranslatingDiskImporter", environment, overrides)
	ret0, _ := ret[0].(disk.Importer)
	return ret0
}

// NewTranslatingDiskImporter indicates an expected call of NewTranslatingDiskImporter
func (mr *MockImporterProviderMockRecorder) NewTranslatingDiskImporter(environment, overrides interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTranslatingDiskImporter", reflect.TypeOf((*MockImporterProvider)(nil).NewTranslatingDiskImporter), environment, overrides)
}
